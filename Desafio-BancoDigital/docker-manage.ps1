# Script PowerShell para gerenciar o ambiente Docker do Banco Digital

param(
    [Parameter(Mandatory=$true)]
    [string]$Action,
    [string]$Service
)

switch ($Action.ToLower()) {
    "up" {
        Write-Host "üöÄ Iniciando todos os servi√ßos do Banco Digital..." -ForegroundColor Green
        docker-compose up -d
        Write-Host "‚úÖ Servi√ßos iniciados!" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìã URLs dos servi√ßos:" -ForegroundColor Cyan
        Write-Host "‚Ä¢ API Conta Corrente: http://localhost:5222" -ForegroundColor White
        Write-Host "‚Ä¢ API Transfer√™ncia: http://localhost:5037" -ForegroundColor White
        Write-Host "‚Ä¢ Kafka UI: http://localhost:8090" -ForegroundColor White
        Write-Host "‚Ä¢ Oracle Database: localhost:1521 (XE)" -ForegroundColor White
        Write-Host ""
        Write-Host "üîç Para ver os logs: docker-compose logs -f [service-name]" -ForegroundColor Yellow
    }
    "down" {
        Write-Host "üõë Parando todos os servi√ßos..." -ForegroundColor Red
        docker-compose down
        Write-Host "‚úÖ Servi√ßos parados!" -ForegroundColor Green
    }
    "restart" {
        Write-Host "üîÑ Reiniciando todos os servi√ßos..." -ForegroundColor Yellow
        docker-compose down
        docker-compose up -d
        Write-Host "‚úÖ Servi√ßos reiniciados!" -ForegroundColor Green
    }
    "logs" {
        if ([string]::IsNullOrEmpty($Service)) {
            Write-Host "üìã Mostrando logs de todos os servi√ßos..." -ForegroundColor Cyan
            docker-compose logs -f
        } else {
            Write-Host "üìã Mostrando logs do servi√ßo: $Service" -ForegroundColor Cyan
            docker-compose logs -f $Service
        }
    }
    "status" {
        Write-Host "üìä Status dos servi√ßos:" -ForegroundColor Cyan
        docker-compose ps
    }
    "build" {
        Write-Host "üî® Fazendo build das aplica√ß√µes..." -ForegroundColor Yellow
        docker-compose build --no-cache
        Write-Host "‚úÖ Build conclu√≠do!" -ForegroundColor Green
    }
    "clean" {
        Write-Host "üßπ Limpando containers, imagens e volumes..." -ForegroundColor Red
        docker-compose down -v --rmi all
        docker system prune -f
        Write-Host "‚úÖ Limpeza conclu√≠da!" -ForegroundColor Green
    }
    "setup" {
        Write-Host "‚öôÔ∏è Configurando ambiente inicial..." -ForegroundColor Yellow
        Write-Host "1. Parando servi√ßos existentes..." -ForegroundColor White
        docker-compose down -v
        Write-Host "2. Fazendo build das aplica√ß√µes..." -ForegroundColor White
        docker-compose build --no-cache
        Write-Host "3. Iniciando servi√ßos..." -ForegroundColor White
        docker-compose up -d
        Write-Host "4. Aguardando inicializa√ß√£o..." -ForegroundColor White
        Start-Sleep -Seconds 30
        Write-Host "‚úÖ Ambiente configurado e pronto para uso!" -ForegroundColor Green
    }
    "test" {
        Write-Host "üß™ Executando testes b√°sicos..." -ForegroundColor Cyan
        Write-Host "Testando API Conta Corrente..." -ForegroundColor White
        try {
            Invoke-RestMethod -Uri "http://localhost:5222/health" -Method GET -ErrorAction Stop
            Write-Host "‚úÖ API Conta Corrente est√° respondendo" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå API Conta Corrente n√£o est√° respondendo" -ForegroundColor Red
        }
        
        Write-Host "Testando API Transfer√™ncia..." -ForegroundColor White
        try {
            Invoke-RestMethod -Uri "http://localhost:5037/health" -Method GET -ErrorAction Stop
            Write-Host "‚úÖ API Transfer√™ncia est√° respondendo" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå API Transfer√™ncia n√£o est√° respondendo" -ForegroundColor Red
        }
        Write-Host "‚úÖ Testes b√°sicos conclu√≠dos!" -ForegroundColor Green
    }
    default {
        Write-Host "üè¶ Banco Digital - Gerenciador Docker" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "Uso: .\docker-manage.ps1 -Action [comando] [-Service nome-do-servico]" -ForegroundColor White
        Write-Host ""
        Write-Host "Comandos dispon√≠veis:" -ForegroundColor Yellow
        Write-Host "  up      - Inicia todos os servi√ßos" -ForegroundColor White
        Write-Host "  down    - Para todos os servi√ßos" -ForegroundColor White
        Write-Host "  restart - Reinicia todos os servi√ßos" -ForegroundColor White
        Write-Host "  logs    - Mostra logs (use -Service para servi√ßo espec√≠fico)" -ForegroundColor White
        Write-Host "  status  - Mostra status dos servi√ßos" -ForegroundColor White
        Write-Host "  build   - Faz build das aplica√ß√µes" -ForegroundColor White
        Write-Host "  clean   - Remove containers, imagens e volumes" -ForegroundColor White
        Write-Host "  setup   - Configura√ß√£o inicial completa" -ForegroundColor White
        Write-Host "  test    - Executa testes b√°sicos" -ForegroundColor White
        Write-Host ""
        Write-Host "Exemplos:" -ForegroundColor Yellow
        Write-Host "  .\docker-manage.ps1 -Action up" -ForegroundColor Gray
        Write-Host "  .\docker-manage.ps1 -Action logs -Service api-conta-corrente" -ForegroundColor Gray
        Write-Host "  .\docker-manage.ps1 -Action status" -ForegroundColor Gray
    }
}